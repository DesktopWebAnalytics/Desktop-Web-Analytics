<?xml version="1.0" encoding="utf-8"?>
<!--
	Desktop Web Analytics
	
	Link http://www.desktop-web-analytics.com
	Link https://github.com/DesktopWebAnalytics
	License http://www.gnu.org/licenses/gpl-3.0-standalone.html GPL v3 or later
-->
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx"
						showStatusBar="false" usePreloader="false"
						applicationComplete="onApplicationComplete();"
						frameRate="24" xmlns:views="views.*" closing="exitApplication(event)"
						locale="{resourceManager.getString('piwik', 'General_Locale')}"
						direction="{selectedLanguageDirection}"
						layoutDirection="{selectedLanguageDirection}" currentState="preload">
	
	<fx:Style source="css/style.css" />
	
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			
			import com.dwa.LaunchCheck;
			import com.dwa.common.profile.Profile;
			import com.dwa.screens.ScreensDetection;
			import com.dwa.updater.AppUpdater;
			
			import mx.collections.ArrayList;
			import mx.events.AIREvent;
			
			import spark.formatters.DateTimeFormatter;
			
			
			private var monitor:URLMonitor;
			
			public var piwikVersion:String;
			public var userVersion:String;
			
			private var DWAVersion:String;
			
			
			public var selectedWebsite:Profile;
			public var startDate:Date;
			public var endDate:Date;
			public var dateRange:String;
			
			[Bindable]
			public var listAllWebsites:Array;
			
			private var launchCheck:LaunchCheck;
			private var checked:Boolean=false;
			private var timer:Timer;
			
			public var shortLocale:String;
			public var localeLanguage:String;
			
			[Bindable]
			public var selectedLanguageDirection:String="ltr";
			
			private function clear():void{
				viewsApp.clear();
			}
			
			private function applicationDeactivate(event:Event):void{
				stage.frameRate = 0.1;
			}
			private function applicationActivate(event:Event):void{
				stage.frameRate = 24;
			}
			
			private function onApplicationComplete():void{
				// set urlrequest timeout
				URLRequestDefaults.idleTimeout=3600000;
				
				// exit application if not a desktop
				if (Capabilities.playerType != 'Desktop') NativeApplication.nativeApplication.exit();
				
				// set timer for loader screen
				timer = new Timer(800,1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, appChecked);
				timer.start();
				
				checkApp();
			}
			private function checkApp():void{
				trace("launch check");
				
				// get current app version
				var testVersion:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = testVersion.namespace();
				DWAVersion = testVersion.ns::versionNumber;
				
				// center window
				var screen:ScreensDetection = new ScreensDetection(stage);
				screen.centerWindow();
				screen = null;
				
				launchCheck = new LaunchCheck(resourceManager.localeChain);
				launchCheck.addEventListener(Event.COMPLETE, resultLaunchCheck);
				launchCheck.addEventListener(ErrorEvent.ERROR, errorLaunchCheck);
				launchCheck.checkAll(DWAVersion);
			}
			private function removeLaunchCheckListeners():void{
				launchCheck.removeEventListener(Event.COMPLETE, resultLaunchCheck);
				launchCheck.removeEventListener(ErrorEvent.ERROR, errorLaunchCheck);
				launchCheck=null;
			}
			private function resultLaunchCheck(event:Event):void{
				setLocale(launchCheck.locale);
				
				listAllWebsites = launchCheck.listWebsites;
				removeLaunchCheckListeners();
				checked=true;
				trace("checked");
				appChecked();
			}
			private function setLocale(loc:Object):void{
				localeLanguage = loc.locale;
				shortLocale = loc.short;
				selectedLanguageDirection = loc.direction;
				resourceManager.localeChain = [ loc.locale ];
			}
			private function errorLaunchCheck(event:ErrorEvent):void{
				trace("error launch check: " + event.text);
			}
			private function appChecked(event:TimerEvent=null):void{
				if(checked && !timer.running){
					currentState = "main";
					viewsApp.currentState="home";
					launchApp();
					timer=null;
				}
			}
			public function goURL(url:String):void{
				var urlReq:URLRequest = new URLRequest(url);
				navigateToURL(urlReq);
			}
			private function checkOnline(e:StatusEvent):void{
				if(monitor.available == true){
					onlineText.visible = false;
				}else{
					onlineText.visible = true;
				}
			}
			private function launchApp():void{
				trace('launch application');
				//if(!NativeApplication.nativeApplication.isSetAsDefaultApplication('dwa')) NativeApplication.nativeApplication.setAsDefaultApplication("dwa");
				//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, browserInvoke);
				
				if(Capabilities.isDebugger) debug.visible = true;
				
				viewsApp.goViewHome();
				
				//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke, false, 0, true);
				NativeApplication.nativeApplication.autoExit = false;
				
				this.addEventListener(AIREvent.APPLICATION_DEACTIVATE, applicationDeactivate, false, 0, true);
				this.addEventListener(AIREvent.APPLICATION_ACTIVATE, applicationActivate, false, 0, true);
				
				monitor = new URLMonitor(new URLRequest("http://www.google.com"));
				monitor.addEventListener(StatusEvent.STATUS, checkOnline, false, 0, true);
				monitor.start();
				
				getPiwikVersion();
				
				// TODO Need to rewrite updater class to reduce/unload memory usage when there is no update
				var update:AppUpdater = new AppUpdater();
				update.initUpdate();
			}
			private function getPiwikVersion():void{
				var url:String = "http://feeds.feedburner.com/PiwikReleases?format=xml";
				
				var loader:URLLoader = new URLLoader();
				
				loader.addEventListener(Event.COMPLETE, load);
				loader.addEventListener(IOErrorEvent.IO_ERROR, error);
				loader.load(new URLRequest(url));
				
				function removeListeners():void{
					loader.removeEventListener(Event.COMPLETE, load);
					loader.addEventListener(IOErrorEvent.IO_ERROR, error);
					loader = null;
				}
				function load(event:Event):void{
					var xml:XML = new XML(loader.data);
					removeListeners();
					
					var version:String = xml.channel.item[0].title;
					
					var numString:int = version.length;
					var i:int = 0;
					var first:int;
					var firstRaw:Boolean = true;
					var finish:int;
					var unicode:int;
					
					for(i; i<numString; i++){
						unicode = version.charCodeAt(i);
						if ((unicode > 46) && (unicode < 58)){
							if(firstRaw){
								first = i;
								firstRaw = false;
							}
							finish = i;
						}
					}
					piwikVersion = version.substring(first, finish+1);
					
				}
				function error(event:ErrorEvent):void{
					removeListeners();
				}
			}
			/* private function browserInvoke(event:InvokeEvent):void{
				trace('browser invoke');
				if(event.currentDirectory != null){
					trace("Current directory="+event.currentDirectory.nativePath);
				}else{
					trace("--no directory information available--");
				}
				
				if(event.arguments.length > 0){
					trace("Arguments: " + event.arguments.toString());
				}else{
					trace("--no arguments--");
				}
			} */
			
			
			private function exitApplication(event:Event):void {
				trace("prevent exit");
				
				NativeApplication.nativeApplication.exit();
			}
			
			public function launchReport():void {
				viewsApp.goViewDashboard();
			}
			public function goSelectProfile():void {
				viewsApp.goViewHome();
			}
			public function goManageProfiles():void {
				viewsApp.goViewProfilesManager();
			}
			public function goCreateProfile():void {
				viewsApp.goViewCreateProfile();
			}
			public function goSettings():void{
				viewsApp.goViewSettings();
			}
			public function goProfileSettings():void{
				viewsApp.goViewProfileSettings();
			}
			public function goToAbout():void{
				viewsApp.goViewAbout();
			}
			
			private function debug_handler():void{
				if(debug.selected){
					flash.profiler.showRedrawRegions(true);
				}else{
					flash.profiler.showRedrawRegions(false);
				}
			}
			
			private function goWebsite(item:Profile):void{
				setCurrentProfile(item);
				launchReport();
			}
			
			
			public function setCurrentProfile(profile:Profile):void{
				const DAY:int = 86400000;
				var formatDate:DateTimeFormatter = new DateTimeFormatter();
				formatDate.dateTimePattern = "yyyy-MM-dd";
				formatDate.setStyle("locale", "en_US");
				
				var start:Date = new Date();
				var end:Date = new Date();
				
				if(!profile.websiteDay) end.time = end.time - DAY;
				start.time = end.time - (DAY * (profile.websitePeriod-1));
				
				var startDateS:String = formatDate.format(start);
				var endDateS:String = formatDate.format(end);
				
				selectedWebsite = profile;
				dateRange = startDateS + ',' + endDateS;
				startDate = start;
				endDate = end;
			}
			
			public function changeDateRange():void{
				
			}
			private function fullScreen():void{
				switch(stage.displayState){
					case StageDisplayState.FULL_SCREEN_INTERACTIVE:
						stage.displayState = StageDisplayState.NORMAL;
						break;
					default:
						stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
						break;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
		
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("piwik")]
	</fx:Metadata>
	<s:states>
		<s:State name="preload" />
		<s:State name="main" />
	</s:states>
	
	<s:Image source="@Embed('assets/480x480_logo.png')" verticalCenter="0" horizontalCenter="0" includeIn="preload" />
	
	<s:Group top="0" bottom="0" left="0" right="0" includeIn="main">
		
		<s:SkinnableContainer id="controlsMenu" left="0" right="0" top="0" height="60" skinClass="skin.components.ControlsMenuBar" >
			
			<s:HGroup left="10" verticalCenter="0" verticalAlign="middle">
				<s:Button skinClass="skin.components.buttons.ButtonMenuSkin" label="{resourceManager.getString('piwik', 'SitesManager_MenuSites')}" click="selectWebsite.selectedIndex=-1;clear();goSelectProfile()" />
				<s:ComboBox id="selectWebsite" skinClass="skin.components.comboBox.ComboBoxSkin" change="goWebsite(selectWebsite.selectedItem)" prompt="{resourceManager.getString('piwik', 'General_Search')}" dataProvider="{new ArrayList(listAllWebsites)}" labelField="websiteName" />
				<s:Button skinClass="skin.components.buttons.ButtonMenuSkin" label="{resourceManager.getString('piwik', 'SitesManager_WebsitesManagement')}" click="selectWebsite.selectedIndex=-1;clear();goManageProfiles()" />
				
				<s:Button id="buttonSettings" skinClass="skin.components.buttons.ButtonMenuSkin" label="{resourceManager.getString('piwik', 'General_Settings')}" click="selectWebsite.selectedIndex=-1;clear();goSettings()" />
				
				<s:Button skinClass="skin.components.buttons.ButtonMenuSkin" label="{resourceManager.getString('piwik', 'General_Help')}" click="selectWebsite.selectedIndex=-1;clear();goToAbout()" />
				
			</s:HGroup>
			
			<s:Button right="10" verticalCenter="5" skinClass="skin.components.buttons.ZoomButtonSkin" click="fullScreen()" />
		</s:SkinnableContainer>
		
		<views:Content id="viewsApp" left="0" right="0" top="65" bottom="20" />
		
		<s:Group left="0" right="0" bottom="0" height="20">
			<s:Label id="onlineText" verticalCenter="0" left="10" visible="false" color="red" text="{resourceManager.getString('piwik', 'Mobile_YouAreOffline')}" />
				
			<s:CheckBox id="debug" verticalCenter="0" right="10" visible="false" selected="false" label="debug" change="debug_handler()" />
		</s:Group>
	</s:Group>
</s:WindowedApplication>